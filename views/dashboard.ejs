<% layout('layout.ejs') %>
<% block('title', __('dashboard')) -%>

<!-- DataTables -->
<% script('js/jquery.jeditable.mini.js') %>
<% script('js/jquery.dataTables.editable.js') %>
<% script('//ajax.aspnetcdn.com/ajax/jquery.dataTables/1.9.4/jquery.dataTables.js') %>
<% stylesheet('//ajax.aspnetcdn.com/ajax/jquery.dataTables/1.9.4/css/jquery.dataTables.css') %> 

<!-- ShowPad -->
<% stylesheet('css/dashboard.css') %>

<div id="tabs">
  <ul class="nav nav-tabs" data-tabs="tabs">
    <li class="active"><a href="#users" data-toggle="tab"><%= __('dashboard.users') %></a></li>
    <li><a href="#docs" data-toggle="tab"><%= __('dashboard.docs') %></a></li>
    <li><a href="#groups" data-toggle="tab"><%= __('dashboard.groups') %></a></li>
    <li><a href="#template" data-toggle="tab"><%= __('dashboard.template') %></a></li>
  </ul>
  <div id="my-tab-content" class="tab-content">
    <div class="tab-pane active" id="users">
        <table id="usertable">
            <thead>
                <tr>
                    <th><%= __('dashboard.users.name') %></th>
                    <th><%= __('dashboard.users.email') %></th>
                    <th><%= __('dashboard.users.createTime') %></th>
                    <th><%= __('dashboard.users.role') %></th>
                    <th><%= __('dashboard.users.status') %></th>
                    <th><%= __('dashboard.users.groups') %></th>
                    <th></th>
                </tr>
            </thead>
        </table>
    </div>
    <div class="tab-pane" id="docs">
        <table id="padtable">
            <thead>
                <tr>
                    <th><%= __('dashboard.docs.name') %></th>
                    <th><%= __('dashboard.docs.type') %></th>
                    <th><%= __('dashboard.docs.createTime') %></th>
                    <th><%= __('dashboard.docs.group') %></th>
                    <th></th>
                </tr>
            </thead>
        </table>
        <br>
        <div>
            <h3><%= __('dashboard.docs.create') %></h3>
            <div class="alert alert-error" id="docs-create-error" style="display:none"></div>
            <div class="alert alert-success" id="docs-create-success" style="display:none"><%= __('dashboard.docs.create.success') %></div>
            <div class="form-inline">
                <label class="control-label" for="docname"><%= __('dashboard.docs.create.name') %></label>
                <input type="text" id="docname" name="docname">

                <label class="control-label" for="doctype"><%= __('dashboard.docs.create.type') %></label>
                <select id="doctype" name="doctype" class="doctypeSelect">
                    <option value="">Loading..</option>
                </select>
                
                <label class="control-label" for="docgroup"><%= __('dashboard.docs.create.group') %></label>
                <select id="docgroup" name="docgroup" class="groupSelect">
                    <option value="">Loading..</option>
                </select>

                <button class="btn primary" type="submit" id="create-doc"><%= __('dashboard.docs.create.submit') %></button>
            </div>
        </div>
    </div>
    <div class="tab-pane" id="groups">
        <table id="grouptable">
            <thead>
                <tr>
                    <th><%= __('dashboard.groups.short') %></th>
                    <th><%= __('dashboard.groups.name') %></th>
                    <th><%= __('dashboard.groups.type') %></th>
                    <th></th>
                </tr>
            </thead>
        </table>
        <br>
        <div>
            <h3><%= __('dashboard.docs.create') %></h3>
            <div class="alert alert-error" id="groups-create-error" style="display:none"></div>
            <div class="alert alert-success" id="groups-create-success" style="display:none"><%= __('dashboard.groups.create.success') %></div>
            <div class="form-inline">
                <label class="control-label" for="groupname"><%= __('dashboard.groups.create.name') %></label>
                <input type="text" id="groupname" name="groupname">
                
                <label class="control-label" for="groupshort"><%= __('dashboard.groups.create.short') %></label>
                <input type="text" id="groupshort" name="groupshort">

                <label class="control-label" for="grouptype"><%= __('dashboard.groups.create.type') %></label>
                <select id="grouptype" name="grouptype" >
                    <option value="open"><%= __('dashboard.groups.create.type.open') %></option>
                    <option value="closed"><%= __('dashboard.groups.create.type.closed') %></option>
                </select>

                <button class="btn primary" type="submit" id="create-group"><%= __('dashboard.groups.create.submit') %></button>
            </div>
        </div>
    </div>
    <div class="tab-pane" id="template">
        <div><%= __('dashboard.template.info') %></div>
        <textarea id="txt_template"></textarea>
        <br>
        <div class="alert alert-error" id="template-set-error" style="display:none"><%= __('dashboard.template.save.error') %></div>
        <div class="alert alert-success" id="template-set-success" style="display:none"><%= __('dashboard.template.save.success') %></div>
        <button class="btn primary" type="submit" id="save-template"><%= __('dashboard.template.save') %></button>
    </div>
  </div>
</div>

<!-- Group/Role-Editor (will be .clone()'d in addModal()) -->
<div id="collectioneditor" class="modal hide fade" tabindex="-1" role="dialog">
    <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal">&#x00D7;</button>
        <h3 class="title"></h3>
    </div>
    <div class="modal-body">
        <ul class="list">
        </ul>
        <div class="form-inline add">
            <label class="control-label text"></label>&nbsp;
            <select class="select">
            </select>

            <button class="btn primary submit" type="submit"><%= __('dashboard.colledit.add') %></button>
        </div>
    </div>
    <div class="modal-footer">
        <button class="btn" data-dismiss="modal"><%= __('dashboard.colledit.abort') %></button>
        <button class="btn btn-primary"><%= __('dashboard.colledit.save') %></button>
    </div>
</div>

<script>
var groups = []
  , groupLookup = {}

$(function ()
{
    refreshGroups();
    refreshDoctypes();

    addModal("user-grp",
            "<%= __('dashboard.colledit.user.group.title') %>",
            "<%= __('dashboard.colledit.user.group.addText') %>");

    addModal("user-role",
            "<%= __('dashboard.colledit.user.role.title') %>",
            "<%= __('dashboard.colledit.user.role.addText') %>");

    $('#create-doc').click(createDoc);
    $('#create-group').click(createGroup);
    $('#save-template').click(saveTemplateText);

    $.fn.dataTableExt.sErrMode = 'throw';

    padtable = $('#padtable')
            .dataTable(
            {
                bProcessing: true,
                sAjaxSource: "/api/1/docs/?datatables=1",
                sAjaxDataProp: "data",
                oLanguage: { sUrl: "/js/datatableslocales/<%=locale%>.json" },
                aoColumns: [
                    {
                        mData: [ "docname" ],
                        mRender: function (docname)
                        {
                            return "<a href='<%= pageurl %>doc/" + docname + "'>" + docname + "</a>";
                        }
                    },
                    { mData: [ "type" ] },
                    {
                        mData: [ "createTime" ],
                        mRender: function (createTime) { return formatDate(new Date(createTime)); }
                    },
                    { mData: [ "group" ] },
                    {
                        mData: null,
                        bSortable: false,
                        sDefaultContent: '',
                        sWidth: '85px',
                        fnRender: function (oObj) { return addRowButtons(oObj, 'docs') }
                    }
                ]
            });

    grouptable = $('#grouptable');
    grouptable = grouptable.dataTable(
            {
                bProcessing: true,
                sAjaxSource: "/api/1/groups/?datatables=1",
                sAjaxDataProp: "data",
                oLanguage: { sUrl: "/js/datatableslocales/<%=locale%>.json" },
                aoColumns: [
                    { mData: [ "short" ] },
                    { mData: [ "name" ] },
                    {
                        mData: [ "type" ],
                        mRender: function (type)
                        {
                            return type.charAt(0).toUpperCase() + type.slice(1);
                        }
                    },
                    {
                        mData: null,
                        bSortable: false,
                        sDefaultContent: '',
                        sWidth: '85px',
                        fnRender: function (oObj) { return addRowButtons(oObj, 'groups') }
                    }
                ]
            });

    usertable = $('#usertable');
    usertable = usertable.dataTable(
            {
                bProcessing: true,
                sAjaxSource: "/api/1/users/?datatables=1",
                sAjaxDataProp: "data",
                oLanguage: { sUrl: "/js/datatableslocales/<%=locale%>.json" },
                aoColumns: [
                    { mData: [ "username" ] },
                    { mData: [ "email" ] },
                    {
                        mData: [ "createTime" ],
                        fnRender: function (oObj) { return formatDate(new Date(oObj.aData.createTime)); }
                    },
                    {
                        mData: [ "roles" ],
                        mRender: function (roles)
                        {
                            return roles.join(", ");
                        }
                    },
                    {
                        mData: [ "status" ],
                        mRender: function (status)
                        {
                            status = status.charAt(0).toUpperCase() + status.slice(1);
                            return status;
                        }
                    },
                    {
                        mData: [ "groups" ],
                        mRender: function (userGroups)
                        {
                            var strGroups = [];

                            for (var i = 0; i < userGroups.length; i++)
                            {
                                var short = userGroups[i];
                                var name = groupLookup[short];
                                var str;

                                if(name)
                                    str = name;
                                else
                                    str = "(" + short + ")"

                                strGroups.push(str);
                            }

                            return strGroups.join(", ");
                        }
                    },
                    {
                        mData: null,
                        bSortable: false,
                        sDefaultContent: '',
                        sWidth: '140px',
                        fnRender: function (oObj) { return addRowButtons(oObj, 'users') }
                    }
                ]
            });

    usertable.makeEditable(
            {
                sUpdateURL: updateUser,
                aoColumns:
                        [
                            null,
                            null,
                            null,
                            null,
                            {
                                event: 'click',
                                indicator: '<%= __("dashboard.users.selectstatus") %>',
                                loadtext: 'loading...',
                                id: "userStatus",
                                type: 'select',
                                onblur: 'submit',
                                data: "{'banned':'Banned','email':'Email','normal':'Normal'}"
                            }
                        ]
            });

    grouptable.makeEditable(
            {
                sUpdateURL: updateGroup,
                aoColumns:
                        [
                            null,
                            {
                                event: 'click',
                                indicator: '<%= __("dashboard.groups.selectrole") %>',
                                loadtext: 'loading...',
                                id: "groupName",
                                onblur: 'submit'
                            },
                            {
                                event: 'click',
                                indicator: '<%= __("dashboard.groups.selecttype") %>',
                                loadtext: 'loading...',
                                id: "groupType",
                                type: 'select',
                                onblur: 'submit',
                                data: "{'open':'Open','closed':'Closed'}"
                            }
                        ]
            });

    $.ajax('/api/1/template')
            .success(function (response)
            {
                $('#txt_template').text(response.data.text);
            });
});

function formatDate(date)
{
    var month = date.getMonth().toString();
    var day = date.getDate().toString();
    if(month.length == 1) month = "0" + month;
    if(day.length == 1) day = "0" + day;
    return (date.getYear() + 1900) + "." + month + "." + day;
}

function refreshGroups()
{
    groups = [];
    groupLookup = {};
    refreshDropdown("groups", "groupSelect",
        function (group)
        {
            groups.push(group);
            groupLookup[group.short] = group.name;

            return {
                text: group.name + " (" + group.short + ")",
                value: group.short
            };
        }
    );
}

function refreshDoctypes()
{
    refreshDropdown("documenttypes", "doctypeSelect", function (doctype) { return { text: doctype, value: doctype }; });
}

function addModal(type, title, addText)
{
    var $protoModal = $('#collectioneditor');
    var $modal = $protoModal.clone();
    var $modalBody = $modal.children('.modal-body:first');

    $modal.attr('id', null);
    $modal.attr('data-type', type);

    $modal.find('.modal-header > .title').attr('data-raw', title);
    $modalBody.find('.add > .text:first').text(addText);

    $protoModal.after($modal);
}

function openModal(type, id, possible, current, cb)
{
    var $modal = $('.modal[data-type=' + type + ']');
    var $list = $modal.find('.list:first');
    var $select = $modal.find('.select:first');
    var $saveBtn = $modal.find('.btn-primary');
    var $title = $modal.find('.modal-header > .title');
    var possibleValues = [];

    $title.text($title.attr('data-raw').replace('$ID', id));

    $list.empty();
    for (var i = 0; i < current.length; i++)
    {
        var cur = current[i];
        addCurrentItem(cur);
    }

    $select.empty();
    for (var i = 0; i < possible.length; i++)
    {
        var pos = possible[i];
        possibleValues.push(pos.val);

        var $option = $('<option>');
        $option.attr('value', pos.val);
        $option.text(pos.text);

        $select.append($option);
    }

    $modal.find('button.submit').click(
        function ()
        {
            var $selected = $select.children(':selected:first');
            var val = $selected.attr('value');
            var text = $selected.text();

            addCurrentItem({ val: val, text: text });
        }
    );

    $saveBtn.off('click');
    $saveBtn.click(
        function ()
        {
            var newelements = [];
            var $elements = $list.children();

            for (var i = 0; i < $elements.length; i++)
            {
                var $elem = $($elements[i]);
                var val = $elem.attr('data-val');

                if(possibleValues.indexOf(val) != -1)
                    newelements.push(val);
            }

            var close = cb(newelements);
            if(close)
            {
                $modal.modal('hide');
            }
        }
    );

    $modal.modal();

    function addCurrentItem(cur)
    {
        var $lis = $list.children();

        // don't add items twice
        for (var i = 0; i < $lis.length; i++)
        {
            var li = $lis[i];
            if($(li).attr('data-val') == cur.val)
                return;
        }

        var $li = $('<li><span></span>&nbsp;<i class="icon-trash" style="cursor: pointer;"></i></li>');

        $li.attr('data-val', cur.val);
        $li.find('span').text(cur.text);
        $li.children('i:first').click(
            function (e)
            {
                $(e.target).parent().remove();
            }
        );

        $list.append($li);
    }
}

function refreshDropdown(endpoint, cls, namecb)
{
    $.ajax("/api/1/" + endpoint)
            .success(function(response)
            {
                $("." + cls).each(
                    function (i, select)
                    {
                        $(select).empty();
                        $.each(response.data, function (i, thing)
                            {
                                var opt = namecb(thing);
                                $(select).append(new Option(opt.text, opt.value));
                            }
                        );
                    }
                );
            });
}

function addRowButtons(oObj, type)
{
    var rowId = oObj.aData.DT_RowId;
    var rowIndex = oObj.iDataRow;
    var controls =
    {
        "delete": { text: '<%= __("dashboard.delete") %>', icon: "icon-trash", func: "deleteThing" }
    };

    if(type == "users")
    {
        controls["delete"].break = true;
        controls["editgroups"] = { text: '<%= __("dashboard.users.editgroups.text") %>', icon: "icon-wrench", func: 'editUserGroups' };
        controls["editroles"] = { text: '<%= __("dashboard.users.editroles.text") %>', icon: "icon-wrench", func: 'editUserRoles' };

        if(Object.keys(oObj.aData.activateEmailTokens).length == 1)
        {
            controls["editroles"].break = true;
            controls["sendmail"] = { text: '<%= __("dashboard.users.sendActivation.text") %> ', icon: "icon-envelope", func: 'sendUserActivation' };
        }
    }

    var $control = $('<div>');

    for (var name in controls)
    {
        var control = controls[name];

        var $link = $('<a>');

        $link.attr('href', '#');
        $link.attr('data-type', type);
        $link.attr('data-rowindex', rowIndex);
        $link.attr('data-rowid', rowId);
        $link.attr('onclick', control.func + "(this)");
        $link.addClass('pull-right');
        $link.css('margin-left', '0.25em');
        $link.text(control.text);

        if(control.icon)
        {
            var $icon = $('<i>');
            $icon.addClass(control.icon);
            $link.append($icon);
        }

        $control.append($link);
        if(control.break)
            $control.append($('<br>'));
    }

    // http://stackoverflow.com/a/6967704
    return $control[0].outerHTML;
}

function editUserGroups(element)
{
    element = $(element);
    var id = element.data('rowid');
    var index = element.data('rowindex');
    var user = usertable.fnGetData(index);

    var possibleGrps = [];
    for (var i = 0; i < groups.length; i++)
    {
        var grp = groups[i];

        possibleGrps.push(
            {
                val: grp.short,
                text: grp.name
            }
        );
    }

    var currentGrps = [];
    for (var i = 0; i < user.groups.length; i++)
    {
        var grp = user.groups[i];

        currentGrps.push(
            {
                val: grp,
                text: groupLookup[grp]
            }
        );
    }

    openModal('user-grp', id, possibleGrps, currentGrps, applyGroups);

    function applyGroups(groups)
    {
        var rtn = updateThing("users", id, "err", { groups: groups }, "", null, null);
        user.groups = groups;
        usertable.fnDeleteRow(index, false);
        usertable.fnAddData(user, true);
        return rtn != "err";
    }
}

function editUserRoles(element)
{
    element = $(element);
    var id = element.data('rowid');
    var index = element.data('rowindex');
    var user = usertable.fnGetData(index);

    var possibleRoles =
        [
            {
                val: "user",
                text: "User"
            },
            {
                val: "admin",
                text: "Admin"
            }
        ];

    var roleLookup = {};
    for (var i = 0; i < possibleRoles.length; i++)
    {
        var role = possibleRoles[i];
        roleLookup[role.val] = role.text;
    }

    var currentRoles = [];
    for (var i = 0; i < user.roles.length; i++)
    {
        var role = user.roles[i];

        currentRoles.push(
            {
                val: role,
                text: roleLookup[role]
            }
        );
    }

    openModal('user-role', id, possibleRoles, currentRoles, applyRoles);

    function applyRoles(roles)
    {
        var rtn = updateThing("users", id, "err", { roles: roles }, "", null, null);
        user.roles = roles;
        usertable.fnDeleteRow(index, false);
        usertable.fnAddData(user, true);
        return rtn != "err";
    }
}

function sendUserActivation(element)
{
    element = $(element);
    // disable link, http://stackoverflow.com/a/13977403
    element.css('pointer-events', 'none');

    var id = element.data('rowid');

    $.get('/dashboard/sendactivation/' + id,
        function (data)
        {
            element.css('pointer-events', ""); // re-enable link
            
            if(data.result == "success")
            {
                alert("<%= __('dashboard.users.sendActivation.success') %>");
            }
            else
            {
                alert("<%= __('dashboard.users.sendActivation.fail') %>");
            }
        }
    );
}

function createDoc()
{
    var thing =
    {
        docname: $('#docname').val(),
        type: $('#doctype').val(),
        group: $('#docgroup').val()
    };

    var errors =
    {
        docexists: "<%= __('dashboard.docs.create.error.exists') %>",
        default: "<%= __('dashboard.docs.create.error.other') %>"
    };

    createThing('docs', thing, thing.docname, errors);
}

function createGroup()
{
    var thing =
    {
        short: $('#groupshort').val(),
        name: $('#groupname').val(),
        type: $('#grouptype').val()
    };

    var errors =
    {
        groupexists: "<%= __('dashboard.groups.create.error.exists') %>",
        default: "<%= __('dashboard.groups.create.error.other') %>"
    };

    createThing('groups', thing, thing.short, errors, refreshGroups);
}

function deleteThing(element)
{
    element = $(element);
    // disable link, http://stackoverflow.com/a/13977403
    element.css('pointer-events', 'none');

    var id = element.data('rowid');
    var index = element.data('rowindex');
    var type = element.data('type');

    var confirmMsg = "<%= __('dashboard.delete.confirm') %>".replace('$THING', id);
    var failMsg = "<%= __('dashboard.delete.fail') %>".replace('$THING', id);

    if(confirm(confirmMsg))
    {
        $.ajax(
            {
                type: "DELETE",
                url: "/api/1/" + type + "/" + id
            }).success(function ()
            {
                var table = getTableForType(type);
                table.fnDeleteRow(index, null, true);
            }).fail(function ()
            {
                alert(failMsg);
                element.css('pointer-events', ""); // re-enable link
            });
    }
}

function updateGroup(value, settings)
{
    var error = "<%= __('dashboard.groups.error.update') %>";
    var rawData = getDataFromDTValue(this, grouptable, settings, 0);
    var username = rawData.data;
    var data = {};

    if(rawData.rowName == "groupType")
    {
        data.type = value;
    }
    else if(rawData.rowName == "groupName")
    {
        data.name = value;
    }

    return updateThing("groups", username, error, data, value, settings, refreshGroups);
}

function updateUser(value, settings)
{
    var error = "<%= __('dashboard.users.error.update') %>";
    var rawData = getDataFromDTValue(this, usertable, settings, 0);
    var username = rawData.data;
    var data = {};

    if(rawData.rowName == "userStatus")
    {
        data.status = value;
    }
    else
    {
        alert("Invalid row: " + rawData.rowName);
    }

    return updateThing("users", username, error, data, value, settings, refreshGroups);
}

function updateThing(type, name, error, data, value, settings, cb)
{
    var returnValue = error;

    $.ajax(
        {
            type: "PUT",
            url: "/api/1/" + type + "/" + name,
            async: false,
            // jQuery strips out all empty objects and arrays
            // in `data` when we hand over the real object.
            // If the admin removes a user from thier last group
            // the `groups`-array will be empty and not transmitted
            // to the server.
            // To circumvent this we encode the data ourselves..
            contentType: 'application/json',
            data: JSON.stringify(data)
        }).success(function ()
        {
            // don't return an error
            returnValue = value;
        }).fail(function ()
        {
            if(settings)
            {
                // return an error later and reset the local value
                settings.onreset();
            }
        });

    if(cb)
        cb();

    return returnValue;
}

function getDataFromDTValue(that, table, settings, index)
{
    // http://stackoverflow.com/questions/13316209/#13321785
    var rowId = table.fnGetPosition(that)[0];
    var rowName = settings.id;
    var data = table.fnGetData(rowId, index);

    return { rowName: rowName, data: data }
}

function createThing(type, thing, name, errors, cb)
{
    var createSuccess = $('#' + type + '-create-success');
    var createError = $('#' + type + '-create-error');

    $.post('api/1/' + type, thing)
            .done(function (res)
            {
                var rtnThing = res.data;
                var table = getTableForType(type);

                rtnThing.DT_RowId = name;
                rtnThing.createTime = new Date();
                table.fnAddData(rtnThing);

                createSuccess.show();
                createError.hide();

                if(cb)
                    cb();
            })
            .fail(function (res)
            {
                var msg = JSON.parse(res.responseText).message;

                if(errors[msg])
                    msg = errors[msg];
                else
                    msg = errors["default"];

                createError.text(msg);
                createSuccess.hide();
                createError.show();

                if(cb)
                    cb();
            });
}

function getTableForType(type)
{
    var table = null;

    switch(type)
    {
        case "users":
            table = usertable;
            break;
        case "docs":
            table = padtable;
            break;
        case "groups":
            table = grouptable;
            break;
    }

    return table;
}

function saveTemplateText()
{
    var text = $('#txt_template').val();

    $.post('api/1/template', { text: text })
            .done(function (res)
            {
                $('#template-set-success').show();
                $('#template-set-error').hide();
            })
            .fail(function (res)
            {
                $('#template-set-error').show();
                $('#template-set-success').hide();
            });
}

// by http://stackoverflow.com/a/10524697, modified
$('a[data-toggle="tab"]').on('shown', function (e)
{
    window.location.hash = $(e.target).attr('href');
});
var lastTab = window.location.hash;
if (lastTab)
{
    $('a[href=' + lastTab + ']').tab('show');
}
</script>
